
using System.Collections;
using System.Collections.Generic;
using SortApi.Models;
using Xunit;

namespace sort_api.Tests{
    public class NumArrayDataTestStub : IEnumerable<object[]>
    {
        // Multiple test cases for sorting
        public IEnumerator<object[]> GetEnumerator()
        {
            yield return new object[]{
                 new NumArrayData{Array = new List<int>{1}},
                 new List<int>{1}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{3,2,1}},
                 new List<int>{1,2,3}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{3,2,2}},
                 new List<int>{2,2,3}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{3,2,1}},
                 new List<int>{1,2,3}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{3,3,3}},
                 new List<int>{3,3,3}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{10,9,8,7,6,5,4,3,2,1}},
                 new List<int>{1,2,3,4,5,6,7,8,9,10}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{6,7,8,3,2,1}},
                 new List<int>{1,2,3,6,7,8}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{3,-2,1}},
                 new List<int>{-2,1,3}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{-3,-2,-1}},
                 new List<int>{-3,-2,-1}
            };

            yield return new object[]{
                 new NumArrayData{Array = new List<int>{0,-1,1}},
                 new List<int>{-1,0,1}
            };


            yield return new object[]{
                 new NumArrayData{Array = new List<int>{
                     -6890, -1547, 7964, 9869, 6840, 7165, -7909, -7327, -3588, 7211, 7422, 7646, -9494, -8734, -3297, 6532, -4775, 1628, -7354, 5304, 4740, 7502, 4427, -8991, -4191, 6052, -3973, -8245, -6405, -6490, -2399, 8905, -4175, 6332, 7208, 9382, 6198, -7440, 6092, -5079, -354, -3897, 304, -9639, 8763, -148, -6308, 4160, -4943, -1613, 4826, -2015, -441, 9746, 1700, -3049, -9809, 6453, -9564, 4003, -6995, -3224, -2873, -7161, 1939, -9756, 36, 9704, 2878, -4555, 4020, -1251, -7145, -3330, 8332, 5580, 9396, 5742, 3386, -2190, -1642, 2101, 242, -4901, 966, -1905, -7957, -9634, 913, -6662, -6346, 2760, -7602, 6576, -6780, 1229, 9910, 2437, 1586, -9040, 702, -3247, 673, 6447, -4015, -6092, 421, 5990, 6136, 9243, -2718, -6523, 4913, -8248, 8742, -1448, -889, -7252, 1265, -405, 803, 3926, -85, -8330, -70, -3372, 5786, 6382, 6543, -4468, -917, -778, 7420, -7279, -5149, 6634, 5933, -1903, -9236, -8467, -855, 6768, -6600, 8598, -3452, -2836, 5855, -5531, -6633, -3450, 9221, -6254, 8189, 4909, 8827, -2904, 79, -8942, 9065, -5832, 7668, -7570, -746, 4841, -4701, -2785, -555, -755, 576, -1678, -895, -8779, 8916, -3238, 881, -3876, -341, -7853, 9541, 5841, -5003, 1351, -5133, 4294, 7321, 7067, 5373, 9661, -2745, 833, 798, -1094, -1446, 6150, 6231, -8158, 8617, 3545, -74, -4647, 1144, -2649
                 }},
                 new List<int>{
                     -9809, -9756, -9639, -9634, -9564, -9494, -9236, -9040, -8991, -8942, -8779, -8734, -8467, -8330, -8248, -8245, -8158, -7957, -7909, -7853, -7602, -7570, -7440, -7354, -7327, -7279, -7252, -7161, -7145, -6995, -6890, -6780, -6662, -6633, -6600, -6523, -6490, -6405, -6346, -6308, -6254, -6092, -5832, -5531, -5149, -5133, -5079, -5003, -4943, -4901, -4775, -4701, -4647, -4555, -4468, -4191, -4175, -4015, -3973, -3897, -3876, -3588, -3452, -3450, -3372, -3330, -3297, -3247, -3238, -3224, -3049, -2904, -2873, -2836, -2785, -2745, -2718, -2649, -2399, -2190, -2015, -1905, -1903, -1678, -1642, -1613, -1547, -1448, -1446, -1251, -1094, -917, -895, -889, -855, -778, -755, -746, -555, -441, -405, -354, -341, -148, -85, -74, -70, 36, 79, 242, 304, 421, 576, 673, 702, 798, 803, 833, 881, 913, 966, 1144, 1229, 1265, 1351, 1586, 1628, 1700, 1939, 2101, 2437, 2760, 2878, 3386, 3545, 3926, 4003, 4020, 4160, 4294, 4427, 4740, 4826, 4841, 4909, 4913, 5304, 5373, 5580, 5742, 5786, 5841, 5855, 5933, 5990, 6052, 6092, 6136, 6150, 6198, 6231, 6332, 6382, 6447, 6453, 6532, 6543, 6576, 6634, 6768, 6840, 7067, 7165, 7208, 7211, 7321, 7420, 7422, 7502, 7646, 7668, 7964, 8189, 8332, 8598, 8617, 8742, 8763, 8827, 8905, 8916, 9065, 9221, 9243, 9382, 9396, 9541, 9661, 9704, 9746, 9869, 9910
                 }
            };
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}